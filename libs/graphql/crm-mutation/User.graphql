fragment UserFields on User {
  id
  username
  full_name
  created
  last_login
  company_id
  email
  admin
  address
  timezone
  locale
  language
  job_title
  department
  division
  super
  default_page
  signature
  image
  position
  location
  deleted
  pass_code
  phone_number
  hide_online_bookings
  passcode
  last_loaded_page
  temporary_password
  custom_id
  hide_calendar
  calendar_order
  clocked_in
  clocked_out
  last_password_reset
  force_password
  limited_user
  can_void
  can_refund
  can_report
  can_rota
  staff_read_only
  stock_read_only
  all_reports
  performance_stats
  disable_tutorial
  all_services
  delete_treatment
  admin_tasks
  admin_leads
  imported
  login_fail_count
  can_edit_booking_time
  user_color
  disable_multiple_clinics
  is_hcp
  login_disabled
  can_patient_appoint
  can_patient_communicatons
  can_patient_photos
  can_patient_fiancials
  can_patient_treatments
  can_patient_docs
  can_patient_packages
  can_patient_prescription
  can_patient_consents
  can_patient_giftvoucher
  can_patient_loyalty
  can_patient_recall
  can_patient_memberships
  can_cancel_booking
  notify_on_booking
  can_edit_communications
  can_delete_communications
  can_view_full_cal
  permission_last_role
  can_merge
  can_discount
  can_discount_single
  restored
  google_auth_secret
  default_contract_id
  can_see_personal
  appear_on_rota
  can_patient_medical_history
  can_lab_requests
  detailed_view
  can_make_blockout
  can_delete_blockout
  can_move_blockout
  main_contact
}

fragment User on User {
  ...UserFields
  Company {
    ...CompanyFields
  }
  CompanyDetails {
    ...CompanyDetailsFields
  }
  UserGroupMember {
    ...UserGroupMemberFields
  }
  UserAlertType {
    ...UserAlertTypeFields
  }
  CmStaffGeneral {
    ...CmStaffGeneralFields
  }
}

mutation createOneUser($data: UserCreateInput!) {
  createOneUser(data: $data) {
    ...User
  }
}

mutation updateOneUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {
  updateOneUser(where: $where, data: $data) {
    ...User
  }
}

mutation deleteOneUser($where: UserWhereUniqueInput!) {
  deleteOneUser(where: $where) {
    ...User
  }
}

mutation updateManyUser($where: UserWhereInput, $data: UserUpdateManyMutationInput!) {
  updateManyUser(where: $where, data: $data) {
    count
  }
}
