//const withNx = require('@nrwl/next/plugins/with-nx');
const cssLoaderConfig = require('@zeit/next-css/css-loader-config');

// const withLess = require('@zeit/next-less');
// const withPlugins = require('next-compose-plugins');

// module.exports = withPlugins([
//
//   //
//
//   [withNx, {
//     // Set this to true if you use CSS modules.
//     // See: https://github.com/css-modules/css-modules
//     cssModules: true,
//   }],
//
//   [withLess, {
//     cssModules: true,
//     lessLoaderOptions: {
//       javascriptEnabled: true,
//     },
//   }],
//
//
// ], {
//   trailingSlash: true,
// });
//


const withLess = require('@zeit/next-less')
const lessToJS = require('less-vars-to-js')
const withPlugins = require('next-compose-plugins')

const fs = require('fs')
const path = require('path')

const dotenv = require('dotenv')

dotenv.config()

// Where your antd-custom.less file lives
const themeVariables = lessToJS(
  fs.readFileSync(path.resolve(__dirname, './antd.less'), 'utf8')
)

const plugins = [
  [withLess, {
    lessLoaderOptions: {
      javascriptEnabled: true,
      cssModules: true,
      modifyVars: themeVariables, // make your antd custom effective
    },
    webpack: (config, {isServer}) => {
      if (isServer) {
        const antStyles = /antd\/.*?\/style.*?/
        const origExternals = [...config.externals]
        config.externals = [
          (context, request, callback) => {
            if (request.match(antStyles)) return callback()
            if (typeof origExternals[0] === 'function') {
              origExternals[0](context, request, callback)
            } else {
              callback()
            }
          },
          ...(typeof origExternals[0] === 'function' ? [] : origExternals),
        ]

        config.module.rules.unshift({
          test: antStyles,
          use: 'null-loader',
        })
      }

      const builtInLoader = config.module.rules.find((rule) => {
        if (rule.oneOf) {
          return (
            rule.oneOf.find((deepRule) => {
              return deepRule.test && deepRule.test.toString().includes('/a^/');

            }) !== undefined
          );
        }
        return false;
      });

      if (typeof builtInLoader !== 'undefined') {
        config.module.rules.push({
          oneOf: [
            ...builtInLoader.oneOf.filter((rule) => {
              return (rule.test && rule.test.toString().includes('/a^/')) !== true;
            }),
          ],
        });
      }

      config.resolve.alias['@'] = path.resolve(__dirname);
      return config;
    },
  }],


  // [withNx, {
  //   // Set this to true if you use CSS modules.
  //   // See: https://github.com/css-modules/css-modules
  //   cssModules: false,
  // }],

]

const nextConfig = {
  env: {},
  cssModules: true,
}
// module.exports = withLess({
//   ...withNx({
//     // Set this to true if you use CSS modules.
//     // See: https://github.com/css-modules/css-modules
//     cssModules: true
//   }),
//   javascriptEnabled: true,
//   cssModules: true,
//   lessLoaderOptions: {
//     javascriptEnabled: true,
//     cssModules: true,
//   }
// });
//module.exports = withPlugins(plugins, nextConfig)


module.exports = {
  webpack: (config, options) => {
    if (!options.defaultLoaders) {
      throw new Error(
        'This plugin is not compatible with Next.js versions below 5.0.0 https://err.sh/next-plugins/upgrade'
      );
    }

    const {dev, isServer} = options;
    const {
      cssModules,
      cssLoaderOptions,
      postcssLoaderOptions,
      lessLoaderOptions = {
        javascriptEnabled: true,
      },
    } = nextConfig;

    options.defaultLoaders.less = cssLoaderConfig(config, {
      extensions: ['less'],
      cssModules,
      cssLoaderOptions,
      postcssLoaderOptions,
      dev,
      isServer,
      loaders: [
        {
          loader: 'less-loader',
          options: lessLoaderOptions,
        },
      ],
    });

    config.module.rules.push({
      test: /\.less$/,
      exclude: /node_modules/,
      use: options.defaultLoaders.less,
    });

    // disable antd css module
    config.module.rules.push({
      test: /\.less$/,
      include: /node_modules/,
      use: cssLoaderConfig(config, {
        extensions: ['less'],
        cssModules: false,
        cssLoaderOptions: {},
        dev,
        isServer,
        loaders: [
          {
            loader: 'less-loader',
            options: lessLoaderOptions,
          },
        ],
      }),
    });

    if (isServer) {
      const antStyles = /antd\/.*?\/style.*?/;
      const origExternals = [...config.externals];
      config.externals = [
        (context, request, callback) => {
          if (request.match(antStyles)) return callback();
          if (typeof origExternals[0] === 'function') {
            origExternals[0](context, request, callback);
          } else {
            callback();
          }
        },
        ...(typeof origExternals[0] === 'function' ? [] : origExternals),
      ];

      config.module.rules.unshift({
        test: antStyles,
        use: 'null-loader',
      });
    }

    if (typeof nextConfig.webpack === 'function') {
      return nextConfig.webpack(config, options);
    }

    return config;
  },
  // cssModules: true,
  // cssLoaderOptions: {
  //   importLoaders: 1,
  //   localIdentName: '[local]___[hash:base64:5]',
  // },
}
